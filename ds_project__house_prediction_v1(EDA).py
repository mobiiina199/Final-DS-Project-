# -*- coding: utf-8 -*-
"""DS Project EDA .ipynb

Automatically generated by Colaboratory.

"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt



"""# **1. Import Data**"""

train=pd.read_csv('E:/data/data science/data course/Final  DS Project/dataset/train_data.csv')
test=pd.read_csv('E:/data/data science/data course/Final  DS Project/dataset/test_data.csv')

train.shape

test.shape

train.info()

test.info()

test['SalePrice'] = -1314

#drop duplicates rows
test = test.drop_duplicates(keep='first')
train = train.drop_duplicates(keep='first')

df = pd.concat((train, test), axis=0).reset_index(drop=True)



"""# **2. Exploratory Data Analysis (EDA)**

## **2.1  Basic Structure**
"""

df.info()

print("\n\nRows     : ", df.shape[0])
print("\nColumns  : ", df.shape[1])
print("\nFeatures : \n", df.columns.tolist())
print("\nMissing values :  ", df.isnull().sum().values.sum())
print("\nUnique values :  \n", df.nunique())

"""The dataset(df) has 2919 samples and 79 features + the target variable (SalePrice).11 of the features are floats, 26 are integers and 43 are objects."""

df.head()

# to get last 5 rows
df.tail()

'''From the table above, we can note a few things. First of all, 
that we need to convert a lot of features into numeric ones later on, 
so that the machine learning algorithms can process them.Furthermore, 
we can see that the features have widely different ranges, 
that we will need to convert into roughly the same scale.
We can also spot some more features, 
that contain missing values (NaN = not a number), 
that we need to deal with.'''

# **2.2 Distributions**


train.describe()

f, ax = plt.subplots(1, figsize=(10, 8))
sns.displot(train.SalePrice, color='purple')
ax.set_title('SalePrice', fontsize=14)

correlation = train.select_dtypes(include=['int64', 'float64']).iloc[:, 1:]
plt.figure(figsize=(25, 25))
sns.heatmap(correlation.corr(), annot=True, cmap ='RdYlGn')

"""The linear correlation between ( GarageCars, GarageArea **and** GarageYrBlt, YearBuilt **and** TotRmsAbvGrd, MasVnrArea) is very strong."""

corr = train.corr() 

corr["SalePrice"].sort_values(axis=0, ascending=False)

"""## **Scatter plot**"""

f, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(1, 5, figsize=(28, 5))

sns.scatterplot(x=train['GrLivArea'], y=train['SalePrice'], ax=ax1,  color='red')
ax1.set_title('Above grade (ground) living area', fontsize=14)

sns.scatterplot(x=train['PoolArea'], y=train['SalePrice'], ax=ax2, color='green')
ax2.set_title('Pool Area', fontsize=14)

sns.scatterplot(x=train['GarageArea'], y=train['SalePrice'],ax=ax3,  color='orange')
ax3.set_title('Size of garage in square feet', fontsize=14)

sns.scatterplot(x=train['MasVnrArea'], y=train['SalePrice'],ax=ax4,  color='#FB1861')
ax4.set_title('Masonry veneer area', fontsize=14)

sns.scatterplot(x=train['LotArea'], y=train['SalePrice'],ax=ax5,marker="o", color='purple')
ax5.set_title('Lot Area', fontsize=14)

plt.show()

f, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(1, 5, figsize=(28, 5))

sns.scatterplot(x=train['LotFrontage'], y=train['SalePrice'], ax=ax1, color='blue')
ax1.set_title('Linear feet of street connected to property', fontsize=13)

sns.scatterplot(x=train['2ndFlrSF'], y=train['SalePrice'], ax=ax2, color='green')
ax2.set_title('Second floor Area', fontsize=16)

sns.scatterplot(x=train['TotalBsmtSF'], y=train['SalePrice'], ax=ax3, color='orange')
ax3.set_title('Total square feet of basement area', fontsize=14)

sns.scatterplot(x=train['1stFlrSF'], y=train['SalePrice'], ax=ax4, color='#FB1861')
ax4.set_title('First Floor Area', fontsize=16)

sns.scatterplot(x=train['YearBuilt'], y=train['SalePrice'], ax=ax5, marker="o", color='purple')
ax5.set_title('Original construction date', fontsize=16)

plt.show()

f, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(1, 5, figsize=(28, 5))

sns.scatterplot(x=train['LowQualFinSF'], y=train['SalePrice'], ax=ax1, color='blue')
ax1.set_title('Low quality finished', fontsize=13)

sns.scatterplot(x=train['GarageCars'], y=train['GarageArea'], ax=ax2, color='green')
ax2.set_title('GarageCars Vs GarageArea', fontsize=13)

sns.scatterplot(x=train['GarageYrBlt'], y=train['YearBuilt'], ax=ax3, color='orange')
ax3.set_title('GarageYrBlt Vs YearBuilt', fontsize=13)

sns.scatterplot(x=train['TotRmsAbvGrd'], y=train['MasVnrArea'], ax=ax4, color='#FB1861')
ax4.set_title('TotRmsAbvGrd Vs MasVnrArea', fontsize=13)

sns.scatterplot(x=train['BsmtFinSF1'], y=train['BsmtUnfSF'], ax=ax5, color='purple')
ax5.set_title('BsmtFinSF1 Vs BsmtUnfSF', fontsize=13)

plt.show()

train.pivot_table(index="OverallCond", columns='MSZoning', values='SalePrice', aggfunc='mean')


np.where(df['YrSold'] < df['YearBuilt'])
df.loc[2403, ['YrSold', 'YearBuilt']]
df.loc[(df.YrSold == 2007) & (df.YearBuilt == 2008), 'SaleType']
df.SaleType.value_counts()
df.loc[(df.YrSold == 2007) & (df.YearBuilt == 2008) & (df.SaleType == 'New'), :]
df = df.drop(df.index[2403])
df.shape
